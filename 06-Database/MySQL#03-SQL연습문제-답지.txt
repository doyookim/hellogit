** 그룹함수, 그룹조회

문1) 학과별로 소속 교수들의 평균 급여, 최소 급여, 최대 급여를 출력하여라.
------------------------------------
SELECT deptno, AVG(sal), MIN(sal), MAX(sal)
FROM professor
GROUP BY deptno;


문2) 학과별로 평균 몸무게와 학생수를 출력하되 평균 몸무게의 내림차순으로 정렬하세요.
------------------------------------
SELECT deptno, AVG(weight) as avg_weight, COUNT(*)
FROM student
GROUP BY deptno
ORDER BY avg_weight DESC;


문3) 학과별 교수 수가 2명 이하인 학과의 학과 번호, 교수 수를 출력 하세요.
------------------------------------
SELECT deptno, COUNT(*)
FROM professor
GROUP BY deptno 
HAVING COUNT(*) <= 2
ORDER BY deptno;



** 여러 테이블에서 데이터 조회하기

문1) EQUI JOIN을 사용하여 학생 테이블과 부서 테이블의 학번, 이름, 학과번호, 소속 학과 이름, 학과 위치를 출력하시오.
------------------------------------
SQL> SELECT s.studno, s.name, s.deptno, d.dname, d.loc
     FROM student s, department d
     WHERE s.deptno=d.deptno;

문2) 102번 학과에 다니는 학생들에 대한 학번, 이름, 학과번호, 소속 학과 이름, 학년을 EQUI JOIN으로 출력하시오.
------------------------------------
SQL> SELECT s.studno, s.name, s.deptno, d.dname, s.grade
     FROM student s, department d
     WHERE s.deptno=d.deptno AND s.deptno=102
     ORDER BY s.grade;

문3) 학생이름, 학년, 담당교수이름, 담당교수의 직급을 EQUI JOIN으로 조회하시오.
------------------------------------
SQL> SELECT s.name, s.grade, p.name, p.position
     FROM student s, professor p
     WHERE s.profno=p.profno;

문4) 학생이름, 학년, 담당교수이름, 담당교수의 직급을 INNER JOIN을 사용하여 조회하시오.
------------------------------------
SQL> SELECT s.name, s.grade, p.name, p.position
     FROM student s
     INNER JOIN professor p
     ON s.profno=p.profno;



** Sub Query

문1) 아이디가 ‘jun123’인 학생과 같은 학년인 학생의 학번, 이름, 학년을 조회 하시오
------------------------------------
SQL> SELECT studno, name, grade FROM student
     WHERE grade=(
          SELECT grade FROM student WHERE userid='jun123'
     );

문2) 101번 학과 학생들의 평균 몸무게보다 몸무게가 적은 학생의 이름, 학과번호, 몸무게를 조회하시오.
------------------------------------
SQL> SELECT name, deptno, weight FROM student
     WHERE weight < (
         SELECT AVG(weight) FROM student WHERE deptno=101
     );

문3) ‘이광훈 학생’과 같은 학과의 학생들에 대한 평균 몸무게보다 몸무게가 적게 나가는 학생들의 이름, 몸무게, 소속학과이름, 담당교수 이름을 조회하시오.
------------------------------------
     (담당교수가 없는 학생은 출력되지 않습니다.)
SQL> SELECT s.name, s.weight, d.dname, p.name FROM student s
     INNER JOIN department d ON s.deptno=d.deptno
     INNER JOIN professor p ON s.profno=p.profno
     WHERE s.weight < (
         SELECT AVG(weight) FROM student WHERE deptno=(
             SELECT deptno FROM student WHERE name='이광훈'
         )
     );

문4) 20101번 학생과 같은 학년이고, 20101번 학생의 키보다 큰 키를 갖는 학생의 이름, 학년, 키를 조회하시오.
------------------------------------
SQL> SELECT name, grade, height FROM student
     WHERE grade = (SELECT grade FROM student WHERE studno=20101)
     AND   height > (SELECT height FROM student WHERE studno=20101);


문5) 학과 이름에 ‘공학’이라는 단어를 포함하고 있는 학과에 재학중인 학생의 
     학번, 학과이름, 학년, 학생이름을 조회하시오
------------------------------------
SQL> SELECT studno, dname, grade, name FROM student s
     INNER JOIN department d ON s.deptno=d.deptno
     WHERE s.deptno IN (
         SELECT deptno FROM department WHERE dname LIKE '%공학%'
     );


** 입력,수정,삭제

문1) 다음의 학과를 신설하기 위한 데이터를 입력하고 결과를 조회하시오.
------------------------------------
SQL> INSERT INTO department (deptno, dname, loc) VALUES (103, '인터넷정보과', '공학관');

문2) 공학관에 위치한 학과의 위치를 ‘5호관’으로 수정하시오.
------------------------------------
SQL> UPDATE department SET loc='5호관' WHERE loc='공학관';

문3) 학과번호가 300번 이상인 학과를 삭제하시오.
------------------------------------
SQL> DELETE FROM department WHERE deptno >= 300;

insert into professor (profno, name, userid, position, sal, hiredate, deptno) VALUES (9921, '뚬땜이', 'ttum', '교수', 550, now(), 201);

담당교수가 없는 학생들에 대한 학생번호, 이름, 소속학과 번호, 소속학과이름, 학년을 조회하시오.

SELECT s.studno, s.name, s.deptno, d.dname, s.grade FROM student s, department d WHERE s.deptno=d.deptno and s.profno is null;